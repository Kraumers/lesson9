'''
1. Создать класс TrafficLight (светофор):
определить у него один атрибут color (цвет) и метод running (запуск);
атрибут реализовать как приватный;
в рамках метода реализовать переключение светофора в режимы: красный, жёлтый, зелёный;
продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение;
переключение между режимами должно осуществляться только в указанном порядке (красный, жёлтый, зелёный);
проверить работу примера, создав экземпляр и вызвав описанный метод.
Задачу можно усложнить, реализовав проверку порядка режимов. При его нарушении выводить соответствующее сообщение и завершать скрипт.
'''
from time import sleep, perf_counter


class TrafficLight:
    __color = None
    __color_delay = {'красный': 7, 'жёлтый': 2, 'зелёный': 7}
    __color_order = ('красный', 'жёлтый', 'зелёный')

    def runnig(self):
        for color in TrafficLight.__color_order:
            TrafficLight.__color = color
            delay = TrafficLight.__color_delay[TrafficLight.__color]
            print(f'{TrafficLight.__color} ({delay} сек)')
            sleep(delay)
        TrafficLight.__color = None
        print('КОНЕЦ')


tl = TrafficLight()
tl.runnig()

'''
2. Реализовать класс Road (дорога).
определить атрибуты: length (длина), width (ширина);
значения атрибутов должны передаваться при создании экземпляра класса;
атрибуты сделать защищёнными;
определить метод расчёта массы асфальта, необходимого для покрытия всей дороги;
использовать формулу: длина*ширина*масса асфальта для покрытия одного кв. метра дороги асфальтом, толщиной в 1 см*число см толщины полотна;
проверить работу метода.
Например: 20 м*5000 м*25 кг*5 см = 12500 т.
'''


class Road:
    __mass = 25  # кг асфальта для покрытия 1 кв.м, толщиной 1 см

    def __init__(self, length, width):
        self._length = length
        self._width = width

    def get_mass(self, height=1):
        mass = self._width * self._length * height * Road.__mass
        mass_name = 'кг'
        if mass >= 1000:
            mass_name = 'т'
            mass = (mass / 1000)
        mass = mass
        return f'{mass:,} {mass_name}'


r = Road(5000, 20)
print(r.get_mass(1))
print(r.get_mass(5))
r = Road(10, 2)
print(r.get_mass(1))
print(r.get_mass(5))

'''
3. Реализовать базовый класс Worker (работник):
определить атрибуты: name, surname, position (должность), income (доход);
последний атрибут должен быть защищённым и ссылаться на словарь, содержащий элементы «оклад» и «премия», например, {"wage": wage, "bonus": bonus};
создать класс Position (должность) на базе класса Worker;
в классе Position реализовать методы получения полного имени сотрудника (get_full_name) и дохода с учётом премии (get_total_income);
проверить работу примера на реальных данных: создать экземпляры класса Position, передать данные, проверить значения атрибутов, вызвать методы экземпляров.
'''


class Worker:
    def __init__(self, name, surname, position, wage=0, bonus=0):
        self.name = name
        self.surname = surname
        self.position = position
        self._income_dict = {'wage': wage, 'bonus': bonus}
        self._income = self._income_dict['wage'] + self._income_dict['bonus']


class Position(Worker):
    def __init__(self, name, surname, position, wage=0, bonus=0):
        super().__init__(name, surname, position, wage, bonus)

    def get_full_name(self, ):
        return f'{self.name} {self.surname}'

    def get_total_income(self):
        return f'{self._income}'


p_1 = Position('a', 'b', 'pos 1', 10, 20)
print(p_1.get_full_name())
print(p_1.get_total_income())

p_2 = Position('c', 'd', 'pos 2', 20, 20)
print(p_2.get_full_name())
print(p_2.get_total_income())

'''
4. Реализуйте базовый класс Car:
у класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда);
опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar;
добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля;
для классов TownCar и WorkCar переопределите метод show_speed. При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
Создайте экземпляры классов, передайте значения атрибутов.
Выполните доступ к атрибутам, выведите результат.
Вызовите методы и покажите результат.
'''


class Car:
    def __init__(self, speed, color, name, is_police=False):
        self.speed = speed
        self.color = color
        self.name = name
        self.is_police = is_police

    def go(self):
        print('Машина поехала')

    def stop(self):
        print('Машина остановилась')

    def turn(self, direction):
        if direction.lower() == 'l':
            print('Машина повернула налево')
        elif direction.lower() == 'r':
            print('Машина повернула направо')
        else:
            print('Недопустимое значение направления поворота')

    def show_speed(self):
        print(f'Скорость машины = {self.speed}')


class TownCar(Car):
    def __init__(self, speed, color, name):
        super().__init__(speed, color, name)

    def show_speed(self):
        super().show_speed()
        if self.speed > 60:
            print('Машина едет с превышением допустимой скорости (60)')


class SportCar(Car):
    def __init__(self, speed, color, name):
        super().__init__(speed, color, name)


class WorkCar(Car):
    def __init__(self, speed, color, name):
        super().__init__(speed, color, name)

    def show_speed(self):
        super().show_speed()
        if self.speed > 40:
            print('Машина едет с превышением допустимой скорости (40)')


class PoliceCar(Car):
    def __init__(self, speed, color, name):
        super().__init__(speed, color, name, is_police=True)


tc = TownCar(70, 'a', 'name_tc_1')
print(tc.name)
tc.go()
tc.stop()
tc.turn('O')
tc.turn('L')
tc.show_speed()

print()
pc = PoliceCar(120, 'b', 'name_pc_1')
print(pc.name)
print(pc.is_police)

'''
5. Реализовать класс Stationery (канцелярская принадлежность):
определить в нём атрибут title (название) и метод draw (отрисовка). Метод выводит сообщение «Запуск отрисовки»;
создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер);
в каждом классе реализовать переопределение метода draw. Для каждого класса метод должен выводить уникальное сообщение;
создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.
'''


class Stationery:
    title = 'канцелярская принадлежность'

    def draw(self):
        print('Запуск отрисовки')


class Pen(Stationery):

    def __init__(self):
        self.title = 'Ручка'

    def draw(self):
        super().draw()
        print(f'{self.title} рисует')


class Pencil(Stationery):

    def __init__(self):
        self.title = 'Карандаш'

    def draw(self):
        super().draw()
        print(f'{self.title} рисует')


class Handle(Stationery):

    def __init__(self):
        self.title = 'Маркер'

    def draw(self):
        super().draw()
        print(f'{self.title} рисует')


s = Stationery()
s.draw()
print(s.title)

pen = Pen()
pen.draw()

pencil = Pencil()
pencil.draw()

h = Handle()
h.draw()